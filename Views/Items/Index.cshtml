@model IEnumerable<WarehouseApp.Models.Item>
    @{
    ViewData["Title"] = "All Items";
    }


    <div class="container-fluid">
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="d-flex align-items-center">
                        <h1 class="display-4 text-primary mb-0 me-4">
                            <i class="fas fa-boxes me-3"></i>All Items
                        </h1>
                    </div>
                    <div class="d-flex gap-2">
                        <a class="btn btn-success mt-2" asp-controller="Home" asp-action="Index">
                            <i class="fas fa-plus me-2"></i>HOME
                        </a>

                        <button class="btn btn-outline-primary" onclick="exportToExcel()">
                            <i class="fas fa-file-excel me-2"></i>Export Excel
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-md-4">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="fas fa-search"></i>
                    </span>
                    <input type="text" class="form-control" id="searchInput" placeholder="Search by code or name...">
                </div>
            </div>
            <div class="col-md-3">
                <select class="form-select" id="categoryFilter">
                    <option value="">All Categories</option>
                    @if (Model != null)
                {
                    @foreach (var category in Model.Where(i => i.Category != null).Select(i => i.Category.CategoryName).Distinct())
                    {
                    <option value="@category">@category</option>
                    }
                }
                </select>
            </div>
            <div class="col-md-3">
                <select class="form-select" id="stockFilter">
                    <option value="">All Stock Levels</option>
                    <option value="low">Low Stock (Less than 10)</option>
                    <option value="medium">Medium Stock (10-50)</option>
                    <option value="high">High Stock (More than 50)</option>
                </select>
            </div>
            <div class="col-md-2">
                <button class="btn btn-outline-secondary w-100" onclick="clearFilters()">
                    <i class="fas fa-times me-2"></i>Clear Filters
                </button>
            </div>
        </div>

        @if (Model != null && Model.Any())
    {
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card bg-primary text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h4 class="card-title">@Model.Count()</h4>
                                <p class="card-text">Total Items</p>
                            </div>
                            <i class="fas fa-boxes fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-success text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h4 class="card-title">@Model.Sum(i => i.CurrentStock)</h4>
                                <p class="card-text">Total Stock</p>
                            </div>
                            <i class="fas fa-warehouse fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-warning text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h4 class="card-title">@Model.Count(i => i.CurrentStock < 10)</h4>
                                <p class="card-text">Low Stock</p>
                            </div>
                            <i class="fas fa-exclamation-triangle fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-info text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h4 class="card-title">@Model.Where(i => i.Category != null).Select(i => i.Category.CategoryName).Distinct().Count()</h4>
                                <p class="card-text">Categories</p>
                            </div>
                            <i class="fas fa-tags fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

        <div class="card shadow">
            <div class="card-body p-0">
                @if (Model != null && Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover table-striped mb-0" id="itemsTable">
                        <thead class="table-dark">
                            <tr>
                                <th class="sortable" data-sort="code">
                                    <i class="fas fa-barcode me-2"></i>Item Code
                                    <i class="fas fa-sort ms-2"></i>
                                </th>
                                <th class="sortable" data-sort="name">
                                    <i class="fas fa-tag me-2"></i>Item Name
                                    <i class="fas fa-sort ms-2"></i>
                                </th>
                                <th>
                                    <i class="fas fa-align-left me-2"></i>Description
                                </th>
                                <th class="sortable" data-sort="category">
                                    <i class="fas fa-folder me-2"></i>Category
                                    <i class="fas fa-sort ms-2"></i>
                                </th>
                                <th class="sortable" data-sort="stock">
                                    <i class="fas fa-cubes me-2"></i>Current Stock
                                    <i class="fas fa-sort ms-2"></i>
                                </th>
                                <th class="text-center">
                                    <i class="fas fa-cogs me-2"></i>Actions
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                            <tr data-item-id="@item.ItemCode">
                                <td>
                                    <span class="badge bg-secondary fs-6">@item.ItemCode</span>
                                </td>
                                <td>
                                    <strong>@item.ItemName</strong>
                                </td>
                                <td>
                                    <span class="text-muted">
                                        @(string.IsNullOrEmpty(item.Description) ? "No description" :
                                                (item.Description.Length > 50 ? item.Description.Substring(0, 50) + "..." : item.Description))
                                    </span>
                                </td>
                                <td>
                                    @if (item.Category != null)
                                        {
                                    <span class="badge bg-primary">@item.Category.CategoryName</span>
                                        }
                                        else
                                        {
                                    <span class="badge bg-light text-dark">Uncategorized</span>
                                        }
                                </td>
                                <td>
                                    @{
                                            var stockClass = item.CurrentStock < 10 ? "bg-danger" :
                                                                item.CurrentStock < 50 ? "bg-warning" : "bg-success";
                                    }
                                    <span class="badge @stockClass fs-6">
                                        @item.CurrentStock
                                        @if (item.CurrentStock < 10)
                                            {
                                        <i class="fas fa-exclamation-triangle ms-1"></i>
                                            }
                                    </span>
                                </td>
                                <td class="text-center">
                                    <div class="btn-group" role="group">
                                        <button type="button" class="btn btn-sm btn-outline-info"
                                                onclick="viewItem('@item.ItemCode')" title="View Details">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-primary"
                                                onclick="editItem('@item.ItemCode')" title="Edit Item">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-danger"
                                                onclick="deleteItem('@item.ItemCode')" title="Delete Item">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <div class="mb-4">
                        <i class="fas fa-box-open fa-5x text-muted"></i>
                    </div>
                    <h3 class="text-muted">No Items Found</h3>
                    <p class="text-muted">There are no items in the warehouse inventory</p>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addItemModal">
                        <i class="fas fa-plus me-2"></i>Add New Item
                    </button>
                </div>
            }
            </div>
        </div>
    </div>

    <style>
        .sortable {
            cursor: pointer;
            user-select: none;
            transition: background-color 0.2s ease;
        }

            .sortable:hover {
                background-color: rgba(255, 255, 255, 0.1);
            }

        .table-responsive {
            border-radius: 0.375rem;
        }

        .card {
            border: none;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

            .card:hover {
                transform: translateY(-2px);
                box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
            }

        .badge {
            font-size: 0.75em;
            font-weight: 500;
        }

        .btn-group .btn {
            margin: 0 2px;
            transition: all 0.2s ease;
        }

            .btn-group .btn:hover {
                transform: scale(1.05);
            }

        .display-4 {
            font-weight: 300;
            background: linear-gradient(135deg, #007bff, #0056b3);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .input-group-text {
            background-color: #f8f9fa;
            border-right: none;
        }

        .form-control:focus,
        .form-select:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

        .table th {
            border-top: none;
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.875rem;
            letter-spacing: 0.5px;
        }

        .table td {
            vertical-align: middle;
            border-color: #dee2e6;
        }

        .table-hover tbody tr:hover {
            background-color: rgba(0, 123, 255, 0.05);
        }

        /* Mobile Styles */
        @@media (max-width: 768px) {
            .display-4 {
                font-size: 2rem;
            }

            .btn-group {
                flex-direction: column;
            }

                .btn-group .btn {
                    margin: 2px 0;
                    font-size: 0.875rem;
                }

            .card-body h4 {
                font-size: 1.5rem;
            }

            .table-responsive {
                font-size: 0.875rem;
            }
        }

        /* Loading animation */
        .loading {
            opacity: 0.6;
            pointer-events: none;
        }

        /* Fade in animation for rows */
        @@keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        tbody tr {
            animation: fadeIn 0.3s ease-in-out;
        }
    </style>

    <script>
        // Search functionality
        document.getElementById('searchInput').addEventListener('input', function () {
            filterTable();
        });

        // Category filter
        document.getElementById('categoryFilter').addEventListener('change', function () {
            filterTable();
        });

        // Stock filter
        document.getElementById('stockFilter').addEventListener('change', function () {
            filterTable();
        });

        function filterTable() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const categoryFilter = document.getElementById('categoryFilter').value;
            const stockFilter = document.getElementById('stockFilter').value;
            const table = document.getElementById('itemsTable');

            if (!table) return;

            const rows = table.getElementsByTagName('tr');
            let visibleCount = 0;

            for (let i = 1; i < rows.length; i++) {
                const row = rows[i];
                const code = row.cells[0].textContent.toLowerCase();
                const name = row.cells[1].textContent.toLowerCase();
                const category = row.cells[3].textContent;
                const stockText = row.cells[4].textContent.match(/\d+/);
                const stock = stockText ? parseInt(stockText[0]) : 0;

                let showRow = true;

                // Search filter
                if (searchTerm && !code.includes(searchTerm) && !name.includes(searchTerm)) {
                    showRow = false;
                }

                // Category filter
                if (categoryFilter && category !== categoryFilter) {
                    showRow = false;
                }

                // Stock filter
                if (stockFilter) {
                    if (stockFilter === 'low' && stock >= 10) showRow = false;
                    if (stockFilter === 'medium' && (stock < 10 || stock > 50)) showRow = false;
                    if (stockFilter === 'high' && stock <= 50) showRow = false;
                }

                row.style.display = showRow ? '' : 'none';
                if (showRow) visibleCount++;
            }

            // Update visible count
            updateResultsCount(visibleCount);
        }

        function updateResultsCount(count) {
            // You can add a results counter here if needed
            console.log(`Showing ${count} items`);
        }

        function clearFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('categoryFilter').value = '';
            document.getElementById('stockFilter').value = '';
            filterTable();
        }

        // Table sorting functionality
        document.querySelectorAll('.sortable').forEach(header => {
            header.addEventListener('click', function () {
                sortTable(this.dataset.sort);
            });
        });

        let sortDirection = {};

        function sortTable(column) {
            const table = document.getElementById('itemsTable');
            if (!table) return;

            const tbody = table.getElementsByTagName('tbody')[0];
            const rows = Array.from(tbody.getElementsByTagName('tr')).filter(row => row.style.display !== 'none');

            const direction = sortDirection[column] === 'asc' ? 'desc' : 'asc';
            sortDirection[column] = direction;

            rows.sort((a, b) => {
                let aVal, bVal;

                switch (column) {
                    case 'code':
                        aVal = a.cells[0].textContent.trim();
                        bVal = b.cells[0].textContent.trim();
                        break;
                    case 'name':
                        aVal = a.cells[1].textContent.trim();
                        bVal = b.cells[1].textContent.trim();
                        break;
                    case 'category':
                        aVal = a.cells[3].textContent.trim();
                        bVal = b.cells[3].textContent.trim();
                        break;
                    case 'stock':
                        const aMatch = a.cells[4].textContent.match(/\d+/);
                        const bMatch = b.cells[4].textContent.match(/\d+/);
                        aVal = aMatch ? parseInt(aMatch[0]) : 0;
                        bVal = bMatch ? parseInt(bMatch[0]) : 0;
                        break;
                }

                if (column === 'stock') {
                    return direction === 'asc' ? aVal - bVal : bVal - aVal;
                } else {
                    return direction === 'asc' ?
                        aVal.localeCompare(bVal) :
                        bVal.localeCompare(aVal);
                }
            });

            // Re-append sorted rows
            rows.forEach(row => tbody.appendChild(row));

            // Update sort icons
            document.querySelectorAll('.sortable i.fa-sort, .sortable i.fa-sort-up, .sortable i.fa-sort-down')
                .forEach(icon => icon.className = 'fas fa-sort ms-2');

            const currentHeader = document.querySelector(`[data-sort="${column}"] i.fa-sort`);
            if (currentHeader) {
                currentHeader.className = direction === 'asc' ?
                    'fas fa-sort-up ms-2' : 'fas fa-sort-down ms-2';
            }
        }

        // Action functions
        function viewItem(itemCode) {
            // Add your view logic here
            window.location.href = `/Items/Details/${itemCode}`;
        }

        function editItem(itemCode) {
            // Add your edit logic here
            window.location.href = `/Items/Edit/${itemCode}`;
        }

        function deleteItem(itemCode) {
            if (confirm('Are you sure you want to delete this item?')) {
                // Add your delete logic here
                // Example: Call API to delete
                fetch(`/Items/Delete/${itemCode}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                    .then(response => {
                        if (response.ok) {
                            // Remove row from table
                            const row = document.querySelector(`tr[data-item-id="${itemCode}"]`);
                            if (row) {
                                row.remove();
                            }
                            showNotification('Item deleted successfully', 'success');
                        } else {
                            showNotification('Error deleting item', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showNotification('Error deleting item', 'error');
                    });
            }
        }

        function exportToExcel() {
            // Add your export logic here
            window.location.href = '/Items/ExportToExcel';
        }

        function showNotification(message, type) {
            // Simple notification function - you can replace with your preferred notification library
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const notification = document.createElement('div');
            notification.className = `alert ${alertClass} alert-dismissible fade show position-fixed`;
            notification.style.cssText = 'top: 20px; right: 20px; z-index: 1050; min-width: 300px;';
            notification.innerHTML = `
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;

            document.body.appendChild(notification);

            // Auto remove after 3 seconds
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 3000);
        }

        // Initialize tooltips if Bootstrap is available
        document.addEventListener('DOMContentLoaded', function () {
            if (typeof bootstrap !== 'undefined') {
                var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                tooltipTriggerList.map(function (tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl);
                });
            }
        });
    </script>
